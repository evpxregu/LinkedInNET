<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(SolutionDir)LinkedInNET\src\Sparkle.LinkedInNET.ServiceDefinition\bin\debug\Sparkle.LinkedInNET.ServiceDefinition.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Sparkle.LinkedInNET.ServiceDefinition" #>
<#@ output extension=".tt.cs" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#

var currentDirectory = Path.GetDirectoryName(Host.ResolvePath("Services.tt"));
var solutionDirectory = Path.GetDirectoryName(Path.GetDirectoryName(currentDirectory));
var xmlPath = Path.Combine(currentDirectory, "..\\LinkedInApiV2.xml");
if (!File.Exists(xmlPath)){
	this.WriteLine("#error ERROR: XML document not found at '"+xmlPath.Replace(solutionDirectory, "")+"'");
}else{
	this.WriteLine("// XML document found at '"+xmlPath.Replace(solutionDirectory, "")+"'");
}

// create definition builder and append data
var builder = new ServiceDefinitionBuilder();
using (var fileStream = new FileStream(xmlPath, FileMode.Open, FileAccess.Read, FileShare.Read))
{
	builder.AppendServiceDefinition(fileStream);
}

// generate code
{
	var stream = new System.IO.MemoryStream();
	var writer = new System.IO.StreamWriter(stream);
	try
	{
		var generator = new CSharpGenerator(writer);
		generator.Run(builder.Definition);
		stream.Seek(0L, System.IO.SeekOrigin.Begin);
		this.WriteLine(new System.IO.StreamReader(stream).ReadToEnd());
	}
	catch (Exception ex)
	{
		this.WriteLine("/*");
		this.WriteLine(ex.ToString());

		if (ex.InnerException != null)
			this.WriteLine(ex.InnerException.ToString());

		this.WriteLine("*/");
	}
}

#>